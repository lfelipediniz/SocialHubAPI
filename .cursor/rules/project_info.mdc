---
description: High-level context and implementation plan for a simple public CRUD API compatible with CodeLeap careers test. Backend in Django + DRF. No code scaffolding or automatic actions - this file is a guide for you to implement step by step.
globs:
  - "**/*"
alwaysApply: true
---

# SocialHubAPI Backend - Implementation Plan (Django + DRF)

## Purpose
Build a minimal public API that mirrors the behavior and data contract of `https://dev.codeleap.co.uk/careers/`. The API will power a simple posts feed with basic CRUD. No frontend is required here. The plan below defines scope, endpoints, data model, validation, auth rules for edits, pagination, CORS, and deployment expectations.

> Important: trailing slashes are required on all routes to avoid CORS issues.

---

## Scope of Work

### Tech Stack
- Python 3.12
- Django 5.x
- Django REST Framework 3.15+
- Optional but recommended: django-filter, drf-spectacular (OpenAPI), django-cors-headers

### Core Entity
**Post**
- id: integer, auto-increment, read-only
- username: string, required on create, immutable after creation
- created_datetime: datetime in UTC, server-generated, read-only
- title: string, required
- content: string, required

Only the fields above are exposed.

### API Endpoints
Base path: `/careers/` (with trailing slash)

1) **Create Post**  
   - `POST /careers/`  
   - Request body:
     ```json
     { "username": "string", "title": "string", "content": "string" }
     ```
   - Response: 201 with the created item including `id` and `created_datetime`.

2) **List Posts**  
   - `GET /careers/`  
   - Sorted by most recent first (`-created_datetime`).  
   - Pagination: limit-offset style (`?limit=10&offset=0`).  
   - Response: paginated payload with keys `count`, `next`, `previous`, `results`.

3) **Retrieve Single Post**  
   - `GET /careers/{id}/`

4) **Update Post (partial)**  
   - `PATCH /careers/{id}/`  
   - Only `title` and `content` are allowed to change.  
   - Authorization rule below applies.  
   - Request body:
     ```json
     { "title": "string", "content": "string" }
     ```
   - Response: 200 with updated item.

5) **Delete Post**  
   - `DELETE /careers/{id}/`  
   - Authorization rule below applies.  
   - Response: 204 with empty body.

### Authorization Rule for Update/Delete
- The frontend does not create users on the backend.  
- For write operations on existing posts, the client must send header `X-Username: <username>`.  
- Update and delete are allowed only if `X-Username` equals the post`s `username`.  
- Otherwise return 403.

### Validation
- `username`, `title`, `content` are required on create.
- `title`, `content` are required on update when present (cannot be empty strings).
- `id`, `username`, `created_datetime` are immutable on PATCH.

### Sorting and Pagination
- Default ordering: `-created_datetime` (most recent first).
- Pagination: LimitOffsetPagination with sane defaults (for example: default=10, max=100).
- Query parameters: `limit`, `offset`.

### Status Codes and Errors
- 201 Created on successful POST.
- 200 OK on successful GET and PATCH.
- 204 No Content on successful DELETE.
- 400 Bad Request for validation errors.
- 403 Forbidden when `X-Username` is missing or does not match the post author on write ops.
- 404 Not Found when id does not exist.

### CORS
- Allow configured frontend origins.
- Keep trailing slashes to avoid CORS edge cases.

### OpenAPI Documentation (recommended)
- Serve schema at `/api/schema/` and interactive docs at `/api/docs/` so frontend can self-serve.

---

## Non-Functional Requirements

- Timezone: store and return timestamps in UTC ISO 8601.
- Deterministic ordering of list responses.
- Minimal logging for requests and errors.
- Secure settings in production: `DEBUG=false`, allowed hosts, CORS origins via env vars.
- No session or CSRF dependencies for the API.

---

## Acceptance Criteria

1) Endpoints exist exactly as specified under `/careers/` with trailing slashes.  
2) Create returns a full item with `id` and `created_datetime` generated by the server.  
3) List returns most recent first and supports `limit` and `offset`.  
4) Retrieve returns the correct item by `id`.  
5) Update only allows `title` and `content` and enforces author check via `X-Username`.  
6) Delete enforces author check via `X-Username` and returns 204.  
7) Error codes and messages are consistent with DRF conventions.  
8) CORS is configured to allow the target frontend origin(s).  
9) Optional: OpenAPI docs available and accurate.

---

## Testing Checklist

- Create: valid payload returns 201 and correct schema.
- Create: missing required fields returns 400 with field errors.
- List: default ordering is newest first.
- List: pagination returns correct `count`, `next`, `previous`, and `results` length.
- Retrieve: unknown id returns 404.
- Update: correct `X-Username` updates fields and returns 200.
- Update: wrong or missing `X-Username` returns 403.
- Update: attempts to change `id`, `username`, or `created_datetime` are ignored or rejected.
- Delete: correct `X-Username` returns 204 and item disappears from list.
- Delete: wrong or missing `X-Username` returns 403.

---

## Environment and Configuration

- Environment variables:
  - `DJANGO_SECRET_KEY`
  - `DJANGO_DEBUG` (true in dev, false in prod)
  - `DJANGO_ALLOWED_HOSTS`
  - `DJANGO_CORS_ALLOWED_ORIGINS`
  - `DATABASE_URL` (SQLite in dev, Postgres in prod)
  - `TZ=UTC`
- Recommended project structure:
  - Project package (settings, urls, wsgi)
  - App `posts/` with models, serializers, permissions, views, urls, tests
- Default pagination and ordering configured globally in DRF settings.

---

## Deployment Expectations

- Provide a public base URL where the API is reachable.
- Use Postgres in production and configure `ALLOWED_HOSTS` and CORS properly.
- If behind a proxy, set forwarded headers correctly.
- Provide a short README with:
  - Base URL
  - Endpoints summary
  - Pagination parameters
  - Header `X-Username` requirement for write ops
  - Link to `/api/docs/` if enabled

---

## Optional Enhancements (not required)

- Likes: `POST /careers/{id}/like/` increments a counter, idempotency up to you.
- Comments: `POST /careers/{id}/comments/` with comment listing under `GET /careers/{id}/comments/`.
- Mentions: parse `@username` and expose computed `mentions: [string]`.
- Media attachments: optional `media_url` field with server-side validation.
- Filters: `?username=<name>`, `?ordering=<field>`.
- Rate limiting: basic throttling for anonymous clients.

---

## Working Mode for This Project

- This file is the single source of truth for requirements.  
- Do not auto-generate or scaffold anything.  
- You will implement the code step by step, and I will assist with targeted snippets, reviews, and tests based on the sections above.  
- Keep compatibility with the public CodeLeap contract at all times.

---

## Code Style Rules

### Comments
- All comments must be in English
- Comments must start with lowercase letter
- Use `#` for single-line comments, never `"""` for docstrings
- Keep comments concise and clear

### Code Organization
- Keep code clean and organized
- Avoid duplicate files with same functionality
- Use explicit URLs instead of ViewSets with @action decorators
- One function per route for better maintainability

### Development Guidelines
- Do not use emojis in any files
- Always activate virtual environment before running any commands: `source venv/bin/activate`
